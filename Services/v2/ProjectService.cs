using cumin_api.Enums;
using cumin_api.Models;
using cumin_api.Models.DTOs;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace cumin_api.Services.v2 {
    public class ProjectService : DbService2<Project> {
        public ProjectService(CuminApiContext context) : base(context) { }

        public async Task<Project> AddProjectAndLinkCreator(Project project, int userId) {
            var project_ = await dbSet.AddAsync(project);
            // project object used for reference instead of projectId, project.id will only be initialized after context.SaveChanges(), since it is autogenerated by db.
            // Trying to call dbContext.SaveChanges() only once.
            // by default project creator is a Project Manager
            var userProject = new UserProject { Project = project_.Entity, UserId = userId, UserRole = UserRole.ProjectManager };
            await context.UserProjects.AddAsync(userProject);

            await context.SaveChangesAsync();

            return project_.Entity;
        }

        public IEnumerable<UserProject> GetAllProjectsForUser(int userId) {
            return context.UserProjects
                .Include(x => x.Project)
                .Where(x => x.UserId == userId)
                .ToList();
        }

        public IEnumerable<User> GetAllUsersInProject(int projectId) {
            return context.UserProjects
                .Include(x => x.User)
                .Where(x => x.ProjectId == projectId)
                .Select(x => x.User)
                .ToList();
        }

        public bool CanUserAccessProject(int projectId, int userId) {
            return context.UserProjects.Any(x => x.ProjectId == projectId && x.UserId == userId);
        }

        public async Task<Sprint> GetActiveSprint(int projectId) {
            Project project =  await dbSet.Include(p => p.ActiveSprint).ThenInclude(s => s.Issues).FirstOrDefaultAsync(p => p.Id == projectId);
            return project.ActiveSprint;
        }

        public async Task LeaveProjectAsync(int projectId, int userId) {
            var userProject = await context.UserProjects.FirstAsync(x => x.ProjectId == projectId && x.UserId == userId);
            if (userProject == null)
                throw new SimpleException($"User is not part of project. UserId: {userId}, ProjectId: {projectId}.");
            if (userProject.UserRole == UserRole.ProjectManager)
                throw new SimpleException($"User is Project Manager, hence cannot leave the project. Transfer role to another member to leave project without any conflicts.");
            
            context.UserProjects.Remove(userProject);
            await context.SaveChangesAsync();
        }
    }
}
